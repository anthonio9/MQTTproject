!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BROKER_PORT	mqtt_base.hpp	/^const int BROKER_PORT = 7733;$/;"	v
BROKER_PORT2	mqtt_base.hpp	/^const int BROKER_PORT2 = 7734;$/;"	v
BUFFSIZE	mqtt_base.hpp	36;"	d
CC	Makefile	/^CC=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-I. -lsctp -std=c++11 -Wall -Wextra$/;"	m
DATA	mqtt_base.hpp	/^const int DATA = 12;$/;"	v
INIT	mqtt_base.hpp	/^const int INIT = 11;$/;"	v
LIB	Makefile	/^LIB=mqtt_base.cpp$/;"	m
LISTENQ	mqtt_base.hpp	35;"	d
MQTTBroker	mqtt_base.cpp	/^MQTTBroker::MQTTBroker()$/;"	f	class:MQTTBroker
MQTTBroker	mqtt_base.cpp	/^MQTTBroker::MQTTBroker(int _service, int _af_family)$/;"	f	class:MQTTBroker
MQTTBroker	mqtt_base.hpp	/^class MQTTBroker$/;"	c
OBJECTS	Makefile	/^OBJECTS = mqtt_example$/;"	m
PUBLISHER	mqtt_base.hpp	/^const int PUBLISHER = 0;$/;"	v
SA	mqtt_base.hpp	34;"	d
SUBSCRIBER	mqtt_base.hpp	/^const int SUBSCRIBER = 1;$/;"	v
_MQTT_BASE_H	mqtt_base.hpp	8;"	d
af_family	mqtt_base.hpp	/^	int sock_fd, service, af_family;$/;"	m	class:MQTTBroker
cli_type	mqtt_base.hpp	/^	int cli_type;			\/\/ constant int SUBSCRIBER or PUBLISHER.$/;"	m	struct:mqtt_msg
data	mqtt_base.hpp	/^	string data;			\/\/ array containing message.$/;"	m	struct:mqtt_msg
data_len	mqtt_base.hpp	/^	size_t data_len;		\/\/ length of message.$/;"	m	struct:mqtt_msg
evnts	mqtt_base.hpp	/^	struct sctp_event_subscribe evnts;$/;"	m	class:MQTTBroker	typeref:struct:MQTTBroker::sctp_event_subscribe
getService	mqtt_base.cpp	/^int MQTTBroker::getService()$/;"	f	class:MQTTBroker
local_addr	mqtt_base.hpp	/^	struct sockaddr_in local_addr, remote_addr;$/;"	m	class:MQTTBroker	typeref:struct:MQTTBroker::sockaddr_in
main	mqtt_example.cpp	/^int main()$/;"	f
mqtt_msg	mqtt_base.hpp	/^struct mqtt_msg {$/;"	s
msg_type	mqtt_base.hpp	/^	int msg_type;			\/\/ constant int INIT or DATA$/;"	m	struct:mqtt_msg
prepare_server	mqtt_base.cpp	/^int MQTTBroker::prepare_server()$/;"	f	class:MQTTBroker
rd_sz	mqtt_base.hpp	/^	size_t rd_sz;$/;"	m	class:MQTTBroker
readbuf	mqtt_base.hpp	/^	char readbuf[BUFFSIZE];$/;"	m	class:MQTTBroker
remote_addr	mqtt_base.hpp	/^	struct sockaddr_in local_addr, remote_addr;$/;"	m	class:MQTTBroker	typeref:struct:MQTTBroker::
service	mqtt_base.hpp	/^	int sock_fd, service, af_family;$/;"	m	class:MQTTBroker
sock_fd	mqtt_base.hpp	/^	int sock_fd, service, af_family;$/;"	m	class:MQTTBroker
topic	mqtt_base.hpp	/^	string topic; 		\/\/ name of subscribed topic.$/;"	m	struct:mqtt_msg
topic_len	mqtt_base.hpp	/^	size_t topic_len; 		\/\/ size of topic.$/;"	m	struct:mqtt_msg
topics	mqtt_base.hpp	/^	std::unordered_map<std::string, std::vector<std::vector<struct sctp_sndrcvinfo>> > topics; $/;"	m	class:MQTTBroker
